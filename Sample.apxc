@RestResource(urlMapping='/api/questions')
global with sharing class Service_Questions_Get {
    
    private static Integer instanceCount = 0;

    @HttpGet
    global static void getQuestions() {
        
        String apiKey = RestContext.request.headers.get('x-kancerx-api-key');
        String apiVersion = RestContext.request.headers.get('api-version');
        String contentType = RestContext.request.headers.get('Content-Type');
        String accept = RestContext.request.headers.get('Accept');
        String patientId = RestContext.request.headers.get('PatientID');
        
        if (apiKey == null || apiVersion == null || contentType == null || accept == null || patientId == null) {
            RestContext.response.addHeader('Content-Type', 'application/json');
            RestContext.response.statusCode = 400;
            RestContext.response.responseBody = Blob.valueOf('{"success": false, "message": "Missing or invalid required headers"}');
            return;
        }
        
        if (!apiVersion.equals('3')) {
            RestContext.response.addHeader('Content-Type', 'application/json');
            RestContext.response.statusCode = 401;
            RestContext.response.responseBody = Blob.valueOf('{"success": false, "message": "Unsupported API version"}');
            return;
        }
        
        Map<String, List<QuestionWrapper>> questionDataByType = new Map<String, List<QuestionWrapper>>();

        List<Questions__c> questions = [SELECT Id, Question_ID__c, Question__c, Name, Is_Default__c, Status__c
                                        FROM Questions__c
                                        ORDER BY Name, Question_ID__c ASC];
        
        for (Questions__c question : questions) {
            if (question.Question_ID__c == null) {
                continue;
            }
            List<AnswerWrapper> answerData = new List<AnswerWrapper>();

            List<Answers__c> answers = [SELECT Answer_ID__c, Answer__c, Score__c, Question_ID__c
                            FROM Answers__c
                            WHERE Question_ID__c = :Decimal.valueOf(question.Question_ID__c)
                            ORDER BY Score__c ASC];

            for (Answers__c answer : answers) {
                answerData.add(new AnswerWrapper(answer));
            }

            String questionType = question.Name;
            if (!questionDataByType.containsKey(questionType)) {
                questionDataByType.put(questionType, new List<QuestionWrapper>());
            }

            questionDataByType.get(questionType).add(new QuestionWrapper(question, answerData));
        }

        List<QuestionCategoryWrapper> finalQuestionData = new List<QuestionCategoryWrapper>();
        for (String category : questionDataByType.keySet()) {
            List<QuestionWrapper> questionsList = questionDataByType.get(category);
            List<QuestionDetailWrapper> questionDetails = new List<QuestionDetailWrapper>();
            
            for (QuestionWrapper question : questionsList) {
                questionDetails.add(new QuestionDetailWrapper(question));
            }
            
            finalQuestionData.add(new QuestionCategoryWrapper(category, questionDetails));
        }

        String jsonResponse = '{"data": ' + JSON.serialize(finalQuestionData) + '}';
        
        RestContext.response.addHeader('Content-Type', 'application/json');
        RestContext.response.statusCode = 200;
        RestContext.response.responseBody = Blob.valueOf(jsonResponse);
        System.debug('{"data": ' + JSON.serializePretty(finalQuestionData) + '}');
    }

    private class QuestionCategoryWrapper {
        public String title;
        public String id;
        public String description;
        public List<QuestionDetailWrapper> questions;

        public QuestionCategoryWrapper(String title, List<QuestionDetailWrapper> questions) {
			instanceCount++;
            this.title = title;
            this.id = String.valueOf(instanceCount);
            this.description = title;
            this.questions = questions;
        }
    }

    private class QuestionWrapper {
        public String id;
        public String title;
        public String description;
        public List<AnswerWrapper> answers;

        public QuestionWrapper(Questions__c question, List<AnswerWrapper> answerData) {
            this.id = String.valueOf(question.Question_ID__c);
            this.title = question.Question__c;
            this.description = question.Name;
            this.answers = answerData;
        }
    }

    private class QuestionDetailWrapper {
        public String type;
        public String question;
        public Boolean is_answered;
        public String id;
        public String answer;
        public List<ChoiceWrapper> choices_list;
    
        public QuestionDetailWrapper(QuestionWrapper question) {
            this.type = 'choices';
            this.question = question.title;
            this.id = question.id;
            this.answer = getAnswerText(question.id);
            System.debug('Answer will be set to ==== > ' + this.answer);
            this.choices_list = new List<ChoiceWrapper>();
    
            // Check if the question is answered
            this.is_answered = isQuestionAnswered(question.id);
    
            // Populate choices_list
            for (AnswerWrapper answer : question.answers) {
                this.choices_list.add(new ChoiceWrapper(answer));
            }
        }
        
        private String getAnswerText(String questionId) {
            String patientId = RestContext.request.headers.get('PatientID');
            System.debug('Question ID =====> ' + questionId);
            System.debug('Patient ID =====> ' + patientId);
            
            try{
                
                Patient_Surveys__c answers = [SELECT Answer_ID__c, Answer__c, Score__c, Question_ID__c
                            FROM Answers__c
                            WHERE Question_ID__c = :Decimal.valueOf(question.Question_ID__c)
                            LIMIT 1];
                ];
        
                if (patientSurvey != null) {
                    return new ChoiceWrapper(AnswerWrapper answer);
                }
            }
            catch (QueryException e) {
            }

          return null;
            
        }
    
        private Boolean isQuestionAnswered(String questionId) {
            String patientIdt = RestContext.request.headers.get('PatientID');
            List<Patient_Surveys__c> answeredSurveys = [
                SELECT Id
                FROM Patient_Surveys__c
                WHERE Patient_ID__c = :patientIdt
                    AND Question_ID__c = :questionId
                    AND Survey_taken_at__c = :Date.today()
            ];
    
            return !answeredSurveys.isEmpty();
        }
    }

    private class ChoiceWrapper {
        public String id;
        public String answer;
        public String icon;

        public ChoiceWrapper(AnswerWrapper answer) {
            this.id = String.valueOf(answer.answer_id);
            this.answer = answer.answer;
            this.icon = String.valueOf(answer.score);
        }
    }

    private class AnswerWrapper {
        public Decimal answer_id;
        public Decimal question_id;
        public String answer;
        public Decimal score;

        public AnswerWrapper(Answers__c answer) { this.answer_id = Decimal.valueOf(answer.Answer_ID__c); this.question_id = answer.Question_ID__c; this.answer = answer.Answer__c; this.score = answer.Score__c;
        }
    }
}